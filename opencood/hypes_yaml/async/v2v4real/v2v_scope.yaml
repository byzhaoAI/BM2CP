name: v2v4real_scope_async
root_dir: 'data/byzhao/V2V4Real/train'
validate_dir: 'data/byzhao/V2V4Real/test'

wild_setting:
  async: true
  async_mode: 'real'
  async_overhead: 100
  seed: 20
  loc_err: false
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06 # Mb!!
  transmission_speed: 27 # Mbps!!
  backbone_delay: 10 # ms

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: &epoches 30
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 2
  frame: &frame 1

fusion:
  core_method: 'IntermediateFusionDatasetV2V4Real_Multi' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset, FeatureFusionDataset supported
  args:
    cur_ego_pose_flag: true

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 8]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -38.4, -5, 140.8, 38.4, 3]
  bev_map_resolution: 0.4

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: point_pillar_scope
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    max_cav: *max_cav
    compression: 32 # compression rate
    backbone_fix: false

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: &layer_nums [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: &num_filters [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
    shrink_header:
      kernal_size: [3]
      stride: [2]
      padding: [1]
      dim: [256]
      input_dim: 384 # 128 * 3

    fusion_args:
      voxel_size: *voxel_size
      downsample_rate: 1
      in_channels: 256
      n_head: 8
      temporal: 'self'
      dropout_rate: 0
      only_attention: true
      communication:
        thre: 0.01
        gaussian_smooth:
          k_size: 5
          c_sigma: 1.0
      agg_operator:
        mode: 'Deform'
        feature_dim: 256
        n_head: 8
        depth: 1
        embed_pos: None
        with_spe: false
        with_scm: false
        hetero: False
      multi_scale: true
      frame: *frame
      layer_nums: *layer_nums
      num_filters: *num_filters
      temporal_fusion: 
        height: 48
        width: 176
        layers: 1 
        channel: 256
        gate: False
        n_head: 5
        rte_ratio: 1
      only_ego: False

    # add decoder
    task:
      decoder:
        input_dim: 256
        num_layer: 2
        num_ch_dec: &decoder_block [ 64, 128 ]
      
      detection:
        anchor_num: *achor_num
      segmentation:
        head_dim: 64
        output_class: &seg_chn 2

loss:
  core_method: point_pillar_combined_loss # point_pillar_loss
  args:
    point_pillar_loss:
      cls_weight: 1.0
      reg: 2.0
    
    point_pillar_seg_loss:
      classes: *seg_chn
      weights: 75.0
      coe: 2.0

#loss:
#  core_method: point_pillar_loss
#  args:
#    cls_weight: 1.0
#    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
    core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
    epoches: *epoches
    warmup_lr: 2e-4
    warmup_epoches: 10
    lr_min: 2e-5
