name: v2v4real_realcp_mamba_async_samp0.01_corr0.5
root_dir: 'data/byzhao/V2V4Real/train'
validate_dir: 'data/byzhao/V2V4Real/test'

yaml_parser: "load_cross_modal_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: &epoches 50
  eval_freq: 2
  save_freq: 1
  max_cav: &max_cav 2

wild_setting:
  async: true
  async_mode: 'real'
  async_overhead: 100
  seed: 20
  loc_err: false
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06 # Mb!!
  transmission_speed: 27 # Mbps!!
  backbone_delay: 10 # ms

fusion:
  core_method: 'IntermediateFusionDatasetV2V4Real' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset, FeatureFusionDataset supported
  args: []

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 8]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -38.4, -5, 140.8, 38.4, 3]
  bev_map_resolution: 0.4

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: point_pillar_realcp_mamba_v2v4real
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    max_cav: *max_cav
    backbone_fix: False
    
    # params for lidar branch
    pc_params:
      voxel_size: *voxel_size
      lidar_range: *cav_lidar
      pillar_vfe:
        use_norm: True
        with_distance: False
        use_absolute_xyz: True
        num_filters: [ 64 ]
      point_pillar_scatter:
        num_features: 64
    
    # params for modality fusion
    modality_fusion:
      num_modality: 1
      bev_backbone:
        encode_first: false
        multi_scale: true

        layer_nums: &layer_nums [3, 4, 5] #[ 3, 5, 8 ]
        layer_strides: [ 2, 2, 2 ]
        num_filters: &num_filters [ 64, 128, 256 ]
        upsample_strides: [ 1, 2, 4 ]
        num_upsample_filter: [ 128, 128, 128 ]
        voxel_size: *voxel_size
      
      shrink_header:
        use: true
        input_dim: 384  # 128 * 3
        dim: [ &out_channels 256 ]
        kernal_size: [ 3 ]
        stride: [ 2 ]
        padding: [ 1 ]
      
      compression: 0  # Compression rate

    # params for collaborative fusion: where2comm
    collaborative_fusion:
      fully: False
      voxel_size: *voxel_size
      downsample_rate: 1
      in_channels: *out_channels
      
      communication:
        round: 1
        #threshold: 0.01
        #gaussian_smooth:
        #  k_size: 5
        #  c_sigma: 1.0
      agg_operator:
        mode: 'ATTEN'
        feature_dim: *out_channels
      multi_scale: True
      layer_nums: *layer_nums
      num_filters: *num_filters

      # sampling params
      dilate_kernel: 3
      threshold: 0.01
      # correction params
      corr_ratio: 0.5

    # params for prediction
    head_dim: 256
    outC: *out_channels
    anchor_number: *achor_num

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

# lr_scheduler:
#     core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
#     epoches: *epoches
#     warmup_lr: 2e-4
#     warmup_epoches: 10
#     lr_min: 2e-5

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.2
  step_size: [10, 20, 30]
