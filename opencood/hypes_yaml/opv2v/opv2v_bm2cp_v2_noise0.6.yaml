name: opv2v_bm2cp_v2_noise0.6
root_dir: '/mnt/data/byzhao/OPV2V/train'
validate_dir: '/mnt/data/byzhao/OPV2V/validate'

yaml_parser: "load_cross_modal_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: &epoches 50
  eval_freq: 10
  save_freq: 1
  max_cav: &max_cav 5

device: &device cuda
train: &train True

wild_setting:
  seed: 20
  async: False
  async_mode: 'sim'
  async_overhead: 100
  loc_err: False
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06  # Mb
  transmission_speed: 27  # Mbps
  backbone_delay: 0  # ms

fusion:
  core_method: 'LiDARCameraIntermediateFusionDatasetOPV2V'  # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args: 
    proj_first: &proj_first false
    clip_pc: false
    # core_method: 'CameraIntermediateFusionDataset' configs
    grid_conf: &grid_conf
      xbound: [-140.8, 140.8, 0.4]   # 限制x方向的范围并划分网格
      ybound: [-40, 40, 0.4]   # 限制y方向的范围并划分网格
      zbound: [-10, 10, 20.0]   # 限制z方向的范围并划分网格
      ddiscr: [2, 50, 48]
      mode: 'LID'
    data_aug_conf: &data_aug_conf
      resize_lim: [0.7, 0.8]
      final_dim: &image_size [360, 480]
      rot_lim: [0, 0] #[-3.6, 3.6]
      H: 600
      W: 800
      rand_flip: False
      bot_pct_lim: [0.0, 0.20]
      cams: ['camera0', 'camera1', 'camera2', 'camera3']
      Ncams: 4

# Preprocess-related
preprocess:
  # Options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [ 0.4, 0.4, 4 ]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # LiDAR range for each individual CAV
  cav_lidar_range: &cav_lidar [ -140.8, -40, -3, 140.8, 40, 1 ]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]
  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]
  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# Anchor box related
postprocess:
  core_method: 'VoxelPostprocessor'  # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [ 0, 90 ]
    num: &achor_num 2
    feature_stride: 4
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl'  # hwl or lwh
  max_num: 100  # Maximum number of objects in a single frame. Use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# Model related
model:
  core_method: point_pillar_bm2cp_v2

  args:
    train: *train
    supervise_single: False
    backbone_fix: False

    # params for camera branch
    img_params:
      grid_conf: *grid_conf
      data_aug_conf: *data_aug_conf
      img_downsample: 8
      chain_channels: &chain_channels 64
    
    # params for lidar branch
    pc_params:
      voxel_size: *voxel_size
      lidar_range: *cav_lidar
      pillar_vfe:
        use_norm: True
        with_distance: False
        use_absolute_xyz: True
        num_filters: [ 64 ]
      point_pillar_scatter:
        num_features: &num_features 64

    bev_backbone:
      encode_first: false
      multi_scale: true
      layer_nums: &layer_nums [ 3, 5, 8 ]
      layer_strides: [ 2, 2, 2 ]
      num_filters: &num_filters [ 64, 128, 256 ]
      upsample_strides: [ 1, 2, 4 ]
      num_upsample_filter: [ 128, 128, 128 ]
      voxel_size: *voxel_size

    shrink_header:
      use: true
      input_dim: 384  # 128 * 3
      dim: [ &out_channels 256 ]
      kernal_size: [ 3 ]
      stride: [ 2 ]
      padding: [ 1 ]
    
    compression: 0  # Compression rate

    # params for modal and collaborative fusion
    fusion:
      multi_scale: True
      layer_nums: *layer_nums
      num_filters: *num_filters
      in_channels: *out_channels
      voxel_size: *voxel_size
      downsample_rate: 4

      grid_att:
        dim: *num_features
        dim_head: 8
        window_size: [1, 5, 6] # (x, y) = (50, 174)
        drop_out: 0.1
        mlp_dim: *num_features
        depth: 3

      #communication:
      #  round: 1
      #  threshold: 0.01
      #  gaussian_smooth:
      #    k_size: 5
      #    c_sigma: 1.0    

    # params for prediction
    head_dim: 256
    outC: *out_channels
    anchor_number: *achor_num

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.002 #2e-4
  args:
    eps: 1e-10
    weight_decay: 1e-2

lr_scheduler:
  core_method: cosineannealwarm # step, multistep, exponential and cosineannealwarm support
  gamma: 0.2
  epoches: *epoches
  warmup_lr: 2e-5
  warmup_epoches: 10
  lr_min: 5e-6