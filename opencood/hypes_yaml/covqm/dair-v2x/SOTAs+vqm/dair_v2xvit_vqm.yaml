name: dair_v2xvit_vqm
data_dir: "/mnt/data/byzhao/DAIR-V2X/cooperative-vehicle-infrastructure"
root_dir: "/mnt/data/byzhao/DAIR-V2X/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/mnt/data/byzhao/DAIR-V2X/cooperative-vehicle-infrastructure/val.json"
test_dir: "/mnt/data/byzhao/DAIR-V2X/cooperative-vehicle-infrastructure/val.json"

noise_setting:
  add_noise: false
  args: 
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0

# comm_range: 100

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: 30
  eval_freq: 5
  save_freq: 1
  max_cav: &max_cav 2


# dataset configs: fusion, preprocess, postprocess
fusion:
  core_method: 'LiDARCameraIntermediateFusionDatasetDAIRV3' # 'LiDARCameraIntermediateFusionDatasetDAIR' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset(V2X) supported. 
  args: 
    proj_first: &proj_first false
    clip_pc: false
    # core_method: 'CameraIntermediateFusionDataset' configs
    grid_conf: &grid_conf
      xbound: [-51.2, 51.2, 0.4]   # 限制x方向的范围并划分网格
      ybound: [-51.2, 51.2, 0.4]   # 限制y方向的范围并划分网格
      zbound: [-3, 1, 4.0]   # 限制z方向的范围并划分网格
      ddiscr: [2, 50, 48]
      mode: 'LID'
    data_aug_conf: &data_aug_conf
      resize_lim: [0.7, 0.8]
      final_dim: [360, 480]
      rot_lim: [0, 0] #[-3.6, 3.6]
      H: 600
      W: 800
      rand_flip: False
      bot_pct_lim: [0.0, 0.20]
      cams: ['camera0', 'camera1', 'camera2', 'camera3']
      Ncams: 4

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav. Format: xyzxyz minmax
  cav_lidar_range: &cav_lidar [ -51.2, -51.2, -3, 51.2, 51.2, 1 ]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: [0, 90]
    feature_stride: 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: point_pillar_v2xvit
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    compression: 0 # compression rate
    backbone_fix: false

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    multimodal:
      # params for camera branch
      use_camera: True
      device: &device 'cuda'
      img_params:
        grid_conf: *grid_conf
        data_aug_conf: *data_aug_conf
        img_downsample: 8
        bev_dim: 64

      # params for lidar branch
      use_lidar: True
      pc_params:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

    base_bev_backbone:
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
    shrink_header:
      kernal_size: [3]
      stride: [1]
      padding: [1]
      dim: [256]
      input_dim: 384 # 128 * 3

    transformer:
      encoder: &encoder
        # number of fusion blocks per encoder layer
        num_blocks: 1
        # number of encoder layers
        depth: 3
        use_roi_mask: true
        use_RTE: &use_RTE False # !!!!!! we set it false
        RTE_ratio: &RTE_ratio 2 # 2 means the dt has 100ms interval while 1 means 50 ms interval
        # agent-wise attention
        cav_att_config: &cav_att_config
          dim: 256
          use_hetero: true
          use_RTE: *use_RTE
          RTE_ratio: *RTE_ratio
          heads: 8
          dim_head: 32
          dropout: 0.3
        # spatial-wise attention
        pwindow_att_config: &pwindow_att_config
          dim: 256
          heads: [16, 8, 4]
          dim_head: [16, 32, 64]
          dropout: 0.3
          window_size: [4, 8, 16]
          relative_pos_embedding: true
          fusion_method: 'split_attn'
        # feedforward condition
        feed_forward: &feed_forward
          mlp_dim: 256
          dropout: 0.3
        sttf: &sttf
          voxel_size: *voxel_size
          downsample_rate: 2

      # add decoder later

loss:
  core_method: point_pillar_pyramid_loss
  args:
    device: *device
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0
    pyramid:
      relative_downsample: [1, 2, 4]
      weight: [0.4, 0.2, 0.1]
    rec:
      weight: 1
    svd:
      weight: 0.5
    bfp:
      weight: 1

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [15, 25, 40]

